/*
 * Oceanengine Open Api
 * 巨量引擎开放平台 Open Api
 *
 * The version of the OpenAPI document: 1.1.71
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.bytedance.ads.api;

import com.bytedance.ads.ApiCallback;
import com.bytedance.ads.ApiClient;
import com.bytedance.ads.ApiException;
import com.bytedance.ads.ApiResponse;
import com.bytedance.ads.Configuration;
import com.bytedance.ads.Pair;

import com.google.gson.reflect.TypeToken;



import com.bytedance.ads.model.AgentAdvBrandListQueryV2Filtering;
import com.bytedance.ads.model.AgentAdvBrandListQueryV2Response;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class AgentAdvBrandListQueryV2Api {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public AgentAdvBrandListQueryV2Api() {
        this(Configuration.getDefaultApiClient());
    }

    public AgentAdvBrandListQueryV2Api(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for openApi2AgentAdvBrandListQueryGet
     * @param agentId  (required)
     * @param startDate 开始时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param endDate 结束时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填了开始时间，则结束时间必填，开始时间与结束时间的跨度不能超过30天。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param filtering 筛选条件 (required)
     * @param cursor 游标。第一次查询不填或传0。后续查询使用出参的cursor字段。 (optional, default to 0)
     * @param cursorSize 页面大小，即一页展示的数据数量。取值范围: 1-1000。 (optional, default to 20)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openApi2AgentAdvBrandListQueryGetCall(Long agentId, String startDate, String endDate, AgentAdvBrandListQueryV2Filtering filtering, Long cursor, Long cursorSize, final ApiCallback _callback) throws ApiException {
        String basePath = null;
        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/open_api/2/agent/adv/brand/list/query/";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (agentId != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("agent_id", agentId));
        }

        if (startDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("start_date", startDate));
        }

        if (endDate != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("end_date", endDate));
        }

        if (filtering != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("filtering", filtering));
        }

        if (cursor != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor", cursor));
        }

        if (cursorSize != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("cursor_size", cursorSize));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "ApiKeyAuth" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call openApi2AgentAdvBrandListQueryGetValidateBeforeCall(Long agentId, String startDate, String endDate, AgentAdvBrandListQueryV2Filtering filtering, Long cursor, Long cursorSize, final ApiCallback _callback) throws ApiException {
        // verify the required parameter 'agentId' is set
        if (agentId == null) {
            throw new ApiException("Missing the required parameter 'agentId' when calling openApi2AgentAdvBrandListQueryGet(Async)");
        }

        // verify the required parameter 'startDate' is set
        if (startDate == null) {
            throw new ApiException("Missing the required parameter 'startDate' when calling openApi2AgentAdvBrandListQueryGet(Async)");
        }

        // verify the required parameter 'endDate' is set
        if (endDate == null) {
            throw new ApiException("Missing the required parameter 'endDate' when calling openApi2AgentAdvBrandListQueryGet(Async)");
        }

        // verify the required parameter 'filtering' is set
        if (filtering == null) {
            throw new ApiException("Missing the required parameter 'filtering' when calling openApi2AgentAdvBrandListQueryGet(Async)");
        }

        return openApi2AgentAdvBrandListQueryGetCall(agentId, startDate, endDate, filtering, cursor, cursorSize, _callback);

    }

    /**
     * 
     * 代理商品牌投放数据
     * @param agentId  (required)
     * @param startDate 开始时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param endDate 结束时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填了开始时间，则结束时间必填，开始时间与结束时间的跨度不能超过30天。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param filtering 筛选条件 (required)
     * @param cursor 游标。第一次查询不填或传0。后续查询使用出参的cursor字段。 (optional, default to 0)
     * @param cursorSize 页面大小，即一页展示的数据数量。取值范围: 1-1000。 (optional, default to 20)
     * @return AgentAdvBrandListQueryV2Response
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public AgentAdvBrandListQueryV2Response openApi2AgentAdvBrandListQueryGet(Long agentId, String startDate, String endDate, AgentAdvBrandListQueryV2Filtering filtering, Long cursor, Long cursorSize) throws ApiException {
        ApiResponse<AgentAdvBrandListQueryV2Response> localVarResp = openApi2AgentAdvBrandListQueryGetWithHttpInfo(agentId, startDate, endDate, filtering, cursor, cursorSize);
        return localVarResp.getData();
    }

    /**
     * 
     * 代理商品牌投放数据
     * @param agentId  (required)
     * @param startDate 开始时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param endDate 结束时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填了开始时间，则结束时间必填，开始时间与结束时间的跨度不能超过30天。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param filtering 筛选条件 (required)
     * @param cursor 游标。第一次查询不填或传0。后续查询使用出参的cursor字段。 (optional, default to 0)
     * @param cursorSize 页面大小，即一页展示的数据数量。取值范围: 1-1000。 (optional, default to 20)
     * @return ApiResponse&lt;AgentAdvBrandListQueryV2Response&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<AgentAdvBrandListQueryV2Response> openApi2AgentAdvBrandListQueryGetWithHttpInfo(Long agentId, String startDate, String endDate, AgentAdvBrandListQueryV2Filtering filtering, Long cursor, Long cursorSize) throws ApiException {
        okhttp3.Call localVarCall = openApi2AgentAdvBrandListQueryGetValidateBeforeCall(agentId, startDate, endDate, filtering, cursor, cursorSize, null);
        Type localVarReturnType = new TypeToken<AgentAdvBrandListQueryV2Response>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     *  (asynchronously)
     * 代理商品牌投放数据
     * @param agentId  (required)
     * @param startDate 开始时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param endDate 结束时间。格式：YYYY-MM-DD。闭区间,可选日期范围是今天及以前（允许包括今天）。 如果选填了开始时间，则结束时间必填，开始时间与结束时间的跨度不能超过30天。 如果选填该字段，则查询的是历史数据。 如果要查询今天的实时数据，则不能填该字段。 (required)
     * @param filtering 筛选条件 (required)
     * @param cursor 游标。第一次查询不填或传0。后续查询使用出参的cursor字段。 (optional, default to 0)
     * @param cursorSize 页面大小，即一页展示的数据数量。取值范围: 1-1000。 (optional, default to 20)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call openApi2AgentAdvBrandListQueryGetAsync(Long agentId, String startDate, String endDate, AgentAdvBrandListQueryV2Filtering filtering, Long cursor, Long cursorSize, final ApiCallback<AgentAdvBrandListQueryV2Response> _callback) throws ApiException {

        okhttp3.Call localVarCall = openApi2AgentAdvBrandListQueryGetValidateBeforeCall(agentId, startDate, endDate, filtering, cursor, cursorSize, _callback);
        Type localVarReturnType = new TypeToken<AgentAdvBrandListQueryV2Response>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
